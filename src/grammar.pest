spaces     = _{ (" " | "\t")+ }
line_join  = _{ "\\" ~ spaces? ~ ("\r"? ~ "\n" | "\r") }
WHITESPACE = _{ line_join | spaces }

singleline_comment = _{ "#" ~ (!NEWLINE ~ ANY)* }
multiline_comment  = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }
COMMENT            = _{ singleline_comment | multiline_comment }

identation      = ${ NEWLINE ~ PEEK_ALL }
identation_push = ${ identation ~ PUSH(spaces) }

arrow_right = @{ "->" | "→" }
for_all     =  { ("kwa" ~ "kila") | "∀" }
in          = @{ "katika" | "∈" }
where       = @{ ("amba" ~ ("ye" | "o" | "cho" | "vyo" | "lo" | "yo" | "zo" | "po" | "ko" | "mo")) | ":" }
return      = @{ "rejesha" | "<-" | "←" }
stop        = @{ "rejea" | "∎" }
while       =  { "kama" ~ "bado" }
if          = @{ "kama" }
else        = @{ "ama" }
true        = @{ "kweli" }
false       = @{ "wongo" }

number          = @{ int ~ ("." ~ ASCII_DIGIT*)? ~ (^"e" ~ int)? }
int             = @{ ("+" | "-")? ~ ASCII_DIGIT+ }
identifier      = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }
identifier_list =  { identifier ~ ("," ~ identifier)* }

item_filter = { where ~ expr }

function            = { simple_function | compound_function }
function_parameters = { "(" ~ (identifier_list ~ item_filter?)? ~ ")" }
simple_function     = { function_parameters ~ arrow_right ~ expr }
compound_function   = { function_parameters ~ statement_block }

program_file    =  { SOI ~ (spaces? ~ NEWLINE)* ~ statements ~ (spaces? ~ NEWLINE)* ~ EOI }
statements      = _{ statement ~ (next_statement)* }
statement       = _{ loop_statement | branching_statement | return_statement | function_declaration | variable_declaration | expr_statement }
statement_block = _{ identation_push ~ statements ~ DROP }
next_statement  = _{ identation ~ statement }

loop_statement       = _{ for_in_statement | while_statement }
branching_statement  = _{ if_statement }
return_statement     =  { stop | (return ~ expr) }
function_declaration =  { identifier ~ function }
variable_declaration =  { identifier_list ~ "=" ~ expr }
expr_statement       =  { expr }

if_statement             = { if_statement_if_clause ~ if_statement_elif_clause* ~ if_statement_else_clause? }
if_statement_if_clause   = { if ~ expr ~ statement_block }
if_statement_elif_clause = { if ~ else ~ expr ~ statement_block }
if_statement_else_clause = { else ~ statement_block }

for_in_statement = { for_all ~ identifier_list ~ in ~ expr ~ item_filter? ~ statement_block? }
while_statement  = { while ~ expr ~ item_filter? ~ statement_block }

expr      = { if_expr }
expr_list = { expr ~ ("," ~ expr)* }

if_expr = { /* assignment_expr */ logical_or ~ (if ~ expr ~ ("," ~ else ~ expr ~ if ~ expr)* ~ "," ~ else ~ expr)? }

/* assignment_expr = { ((call ~ ".")? ~ identifier ~ "=" ~ assignment_expr) | logical_or } */

logical_or = { logical_and ~ ("|" ~ logical_and)* }

logical_and = { equality ~ ("&" ~ equality)* }

equality = { comparison ~ (("!=" | "==") ~ comparison)* }

comparison = { range ~ ((">=" | ">" | "<=" | "<") ~ range)* }

range = { term ~ (".." ~ term)? }

term = { factor ~ (("-" | "+") ~ factor)* }

factor = { unary ~ (("/" | "*") ~ unary)* }

unary = { ("!" | "-") ~ unary | call }

call                = { primary ~ (call_arguments | index_arguments | named_member_access)* }
call_arguments      = { "(" ~ expr_list? ~ ")" }
index_arguments     = { "[" ~ expr_list? ~ "]" }
named_member_access = { "." ~ identifier }

primary = { number | false | true | identifier | array_literal | dictionary_literal | "(" ~ expr_list ~ ")" }

array_literal = { "[" ~ (array_entry ~ ("," ~ array_entry)*)? ~ "]" }
array_entry   = { ".."? ~ expr }

dictionary_literal = { "{" ~ (dictionary_entry ~ ("," ~ dictionary_entry)*)? ~ "}" }
dictionary_entry   = { (".." ~ expr) | (expr ~ ":" ~ expr) }