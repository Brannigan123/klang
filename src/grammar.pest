spaces     = _{ (" " | "\t")+ }
line_join  = _{ "\\" ~ spaces? ~ NEWLINE }
WHITESPACE = _{ line_join | spaces }

singleline_comment = _{ "#" ~ (!NEWLINE ~ ANY)* }
multiline_comment  = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }
COMMENT            = _{ singleline_comment | multiline_comment }

arrow_right   = @{ "->" | "→" }
for_all       =  { ("kwa" ~ "kila") | "∀" }
in            = @{ "katika" | "∈" }
where         = @{ ("amba" ~ ("ye" | "o" | "cho" | "vyo" | "lo" | "yo" | "zo" | "po" | "ko" | "mo")) | ":" }
return        = @{ "rejesha" | "<-" | "←" }
stop          = @{ "rejea" | "∎" }
while         =  { "kama" ~ "bado" }
if            = @{ "kama" }
elif          =  { "au" ~ "kama" }
else          = @{ "ama" }
true_literal  = @{ "kweli" }
false_literal = @{ "wongo" }

number          = @{ int ~ ("." ~ ASCII_DIGIT*)? ~ (^"e" ~ int)? }
int             = @{ ("+" | "-")? ~ ASCII_DIGIT+ }
identifier      = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }
identifier_list =  { identifier ~ ("," ~ identifier)* }

item_filter = { where ~ expr }

function            = { simple_function | compound_function }
function_parameters = { "(" ~ (identifier_list ~ item_filter?)? ~ ")" }
simple_function     = { function_parameters ~ arrow_right ~ expr }
compound_function   = { function_parameters ~ statement_block }

program_file    =  { SOI ~ NEWLINE* ~ statements ~ NEWLINE* ~ EOI }
statements      = _{ statement ~ (NEWLINE* ~ statement)* }
statement       = _{ loop_statement | branching_statement | return_statement | function_declaration | variable_declaration | expr_statement }
statement_block = _{ NEWLINE* ~ "{" ~ NEWLINE* ~ statements ~ NEWLINE* ~ "}" ~ NEWLINE* }

loop_statement       = _{ for_in_statement | while_statement }
branching_statement  = _{ if_statement }
return_statement     =  { stop | (return ~ expr) }
function_declaration =  { identifier ~ function }
variable_declaration =  { identifier_list ~ "=" ~ expr }
expr_statement       =  { expr }

if_statement             = { if_statement_if_clause ~ if_statement_elif_clause* ~ if_statement_else_clause? }
if_statement_if_clause   = { if ~ expr ~ statement_block }
if_statement_elif_clause = { elif ~ expr ~ statement_block }
if_statement_else_clause = { else ~ statement_block }

for_in_statement = { for_all ~ identifier_list ~ in ~ expr ~ item_filter? ~ statement_block? }
while_statement  = { while ~ expr ~ item_filter? ~ statement_block }

expr      = _{ if_expr }
expr_list = _{ expr ~ ("," ~ expr)* }

if_expr = { /* assignment_expr */ logical_or ~ ("?" ~ expr ~ ":" ~ expr)? }

/* assignment_expr = { ((call ~ ".")? ~ identifier ~ "=" ~ assignment_expr) | logical_or } */

logical_or = { logical_and ~ ("|" ~ logical_and)* }

logical_and = { equality ~ ("&" ~ equality)* }

equality    =  { comparison ~ (equality_op ~ comparison)* }
equality_op = _{ eq | neq }
eq          = @{ "==" }
neq         = @{ "!=" }

comparison    =  { range ~ (comparison_op ~ range)* }
comparison_op = _{ ge | gt | le | lt }
ge            = @{ ">=" }
gt            = @{ ">" }
le            = @{ "<=" }
lt            = @{ "<" }

range = { term ~ (".." ~ term)? }

term    =  { factor ~ (term_op ~ factor)* }
term_op = _{ add | minus }
add     = @{ "+" }
minus   = @{ "-" }

factor    =  { unary ~ (factor_op ~ unary)* }
factor_op = _{ divide | multiply | remainder }
divide    = @{ "/" }
multiply  = @{ "*" }
remainder = @{ "%" }

unary    =  { unary_op ~ unary | call }
unary_op = _{ not | negate }
not      = @{ "!" }
negate   = @{ "-" }

call                = { primary ~ (call_arguments | index_arguments | named_member_access)* }
call_arguments      = { "(" ~ expr_list? ~ ")" }
index_arguments     = { "[" ~ expr_list? ~ "]" }
named_member_access = { "." ~ identifier }

primary = _{ number | false_literal | true_literal | string | identifier | array_literal | dictionary_literal }

string                          = ${ "\"" ~ string_inner_part* ~ "\"" }
string_inner_part               = _{ string_expression_interpolation | string_variable_interpolation | string_literal }
string_literal                  = ${ ("\\\"" | "\\\\$" | !"\"" ~ !"$" ~ ANY)+ }
string_expression_interpolation = ${ "${" ~ expr ~ "}" }
string_variable_interpolation   = ${ "$" ~ identifier }

array_literal = { "[" ~ (array_entry ~ ("," ~ array_entry)*)? ~ "]" }
array_entry   = { ".."? ~ expr }

dictionary_literal = { "{" ~ (dictionary_entry ~ ("," ~ dictionary_entry)*)? ~ "}" }
dictionary_entry   = { (".." ~ expr) | (expr ~ ":" ~ expr) }